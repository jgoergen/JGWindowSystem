///////////////////////////////////////////////////////////////////////////////////////
//
// WAMBATECH DRAG DROP MANAGER
//
// ANY DISPLAY OBJECT CAN USE THIS TO FACILITATE CREATING A COPY OF IT // AND PASSING A PAYLOAD TO ANY OBJECT THAT ITS DROPPED ON (ASSUMING THE OBJECT // SUPPORTS DRAG DROP).
//
// TODO:
//		DEEP OBJECT COPY
//		INIT DRAG
//		FIND OBJECTS UNDER MOUSE
//		QUERY VALID DROP TARGET
//		INIT DROP
//		CLEANUP
//
// FUTURE FEATURES:
//		HIGHLIGHT CURRENT DROP TARGET
//
///////////////////////////////////////////////////////////////////////////////////////

package com.wambatech.dragdrop
{
	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.display.DisplayObject;	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.Sprite;
	import flash.geom.Point;
	import fl.transitions.Tween;
	import fl.transitions.TweenEvent;	
	import fl.transitions.easing.*; 
	import flash.events.MouseEvent;
	import flash.geom.ColorTransform;
	import flash.utils.Timer;
	import flash.events.TimerEvent;
	import flash.utils.getQualifiedClassName;
	import flash.geom.Rectangle;
	import flash.utils.Dictionary;
	
	import com.wambatech.windowmanager.WTWindowContainer;
	
	public class DragDropManager extends MovieClip
	{				
		public static var DRAG_WAIT:Number = 500;
	
		public static var dragCopy:Sprite;		
		public static var theObject:Object;
		public static var objHandle:Object;
		public static var objDataType:String;
		public static var objData:Object;
		public static var dropTargetObject:Object;
		public static var dropTargets:Array;
		public static var dragTargets:Array;
		public static var dragTimer:Timer;
		public static var delayTimer:Timer;
		public static var finishing:Boolean = false;
		public static var copyFadeInTween:Tween;
		public static var originalFadeOutTween:Tween;
		public static var returnTweenX:Tween;
		public static var returnTweenY:Tween;
		public static var returnTweenAlpha:Tween;
		public static var originalFadeInTween:Tween;
		public static var dropTargetResponseFunction:Function = null;
		public static var dropMarkerArray:Array;
		public static var dragOffset:Point;
		
		public static function registerDropObject(whatObject:Object, theDataType:String, theResponseFunction:Function = null):void
		{
			if (dropTargets == null)
				dropTargets = new Array();
				
			// dropTargetResponseFunction = responseFunction;
				
			dropTargets.push({object: whatObject, dataType: theDataType, responseFunction: theResponseFunction});
		}
		
		public static function unRegisterDropObject(whatObject:Object):void
		{
			if (dropTargets == null)
				return;
				
			for (var i:int = 0; i < dropTargets.length; i++)
			{
				if (dropTargets[i].object == whatObject)
				{
					dropTargets.splice(i, 1)
					break;
				}
			}
		}
		
		public static function registerDraggableObject(whatObject:Object, theDataType:String, theData:Object):void
		{			
			if (dragTargets == null)
				dragTargets = new Array();
				
			dragTargets.push({object: whatObject, dataType: theDataType, data: theData});
			
			whatObject.addEventListener(MouseEvent.MOUSE_DOWN, dragStart);
		}
		
		public static function unRegisterDraggableObject(whatObject:Object):void
		{
			whatObject.removeEventListener(MouseEvent.MOUSE_DOWN, dragStart);
			
			for (var i:int = 0; i < dragTargets.length; i++)
			{
				if (dragTargets[i].object == whatObject)
				{
					dropTargets.splice(i, 1)
					break;
				}
			}
		}
		
		public static function updateData(whatObject:Object, theData:Object)
		{
			for (var i:int = 0; i < dragTargets.length; i++)
			{
				if (dragTargets[i].object == whatObject)
				{
					dragTargets[i].data = theData
					break;
				}
			}
		}
		
		private static function dragStart(event:MouseEvent):void
		{
			if (dragOffset == null)
				dragOffset = new Point();
			
			dragOffset.x = event.localX;
			dragOffset.y = event.localY;
			
			if (getQualifiedClassName(event.target) == "flash.text::TextField")
			{
				//startDragDrop(event.target.parent);				
				theObject = event.target.parent;
				startDelayedStart();
			} else {
				//startDragDrop(event.target);
				theObject = event.target;
				startDelayedStart();
			}
			
			event.target.stage.addEventListener(MouseEvent.MOUSE_UP, dragStop);
		}
		
		private static function dragStop(event:MouseEvent):void
		{
			if (delayTimer == null)
				return;
				
			if (delayTimer.running)
			{
				delayTimer.stop();
				return;
			}
			
			stopDragDrop();
		}
		
		public static function startDelayedStart():void
		{
			if (delayTimer == null)
			{
				delayTimer = new Timer(DRAG_WAIT, 1);
				delayTimer.addEventListener(TimerEvent.TIMER, function() { startDragDrop(theObject); });
			}
			
			delayTimer.start();
		}
		
		public static function startDragDrop(whatObject:Object):void
		{			
			for (var i:int = 0; i < dragTargets.length; i++)
			{
				if (dragTargets[i].object == whatObject)
				{
					objDataType = dragTargets[i].dataType;
					objData = dragTargets[i].data;
					break;
				}
			}
		
			if (finishing)
				finishDragDrop();
					
			//var tmpBitmapData:BitmapData = new BitmapData(whatObject.width, whatObject.height);
			//tmpBitmapData.draw(whatObject as MovieClip);
			//var dragCopyBMP:Bitmap = new Bitmap(tmpBitmapData);
									
			dragCopy = new Sprite();
			
			var dragCopyBMP:Sprite = new DragMarker(new Rectangle(0, 0, whatObject.width, whatObject.height));
			
			dragCopy.mouseEnabled = false;
			dragCopy.addChild(dragCopyBMP);
			dragCopy.startDrag();			
			
			//var newPos:Point = whatObject.parent.localToGlobal(new Point(whatObject.x, whatObject.y));
			var newPos:Point = new Point(whatObject.stage.mouseX - dragOffset.x, whatObject.stage.mouseY - dragOffset.y);
						
			dragCopy.x = newPos.x;
			dragCopy.y = newPos.y;
			
			objHandle = whatObject;
			
			objHandle.stage.addChild(dragCopy);
			
			if (copyFadeInTween != null)
				copyFadeInTween.stop();
				
			if (originalFadeOutTween != null)
				originalFadeOutTween.stop();
			
			copyFadeInTween = new Tween(dragCopy, "alpha", Strong.easeOut, dragCopy.alpha, 0.5, 2, true);
			//originalFadeOutTween = new Tween(objHandle, "alpha", Strong.easeOut, objHandle.alpha, 0.5, 2, true);
						
			if (dragTimer == null)
			{
				dragTimer = new Timer(100, 0);
				dragTimer.addEventListener(TimerEvent.TIMER, dragTimerHandler);
			}
			
			highlightDropTargets();
			
			dragTimer.start();
		}
				
		public static function stopDragDrop():void
		{
			objHandle.stage.removeEventListener(MouseEvent.MOUSE_UP, dragStop);
						
			dragTimer.stop();
			finishing = true;
			dragCopy.stopDrag();
			//unHighlightDropTargets();
			
			if (dropTargetObject == null)
			{			
				var newPos:Point = objHandle.parent.localToGlobal(new Point(objHandle.x, objHandle.y));
				
				if (returnTweenX != null)
					returnTweenX.stop();
					
				if (returnTweenY != null)
					returnTweenY.stop();
					
				if (returnTweenAlpha != null)
					returnTweenAlpha.stop();
				
				returnTweenX = new Tween(dragCopy, "x", Strong.easeOut, dragCopy.x, newPos.x, .5, true);
				returnTweenY = new Tween(dragCopy, "y", Strong.easeOut, dragCopy.y, newPos.y, .5, true);
				returnTweenAlpha = new Tween(dragCopy, "alpha", Strong.easeOut, dragCopy.alpha, 0, .5, true);
				
				returnTweenAlpha.addEventListener(TweenEvent.MOTION_FINISH, finishDragDrop);
										
				if (originalFadeOutTween != null)
					originalFadeOutTween.stop();
				
				if (originalFadeInTween != null)
					originalFadeInTween.stop();
					
				//originalFadeInTween = new Tween(objHandle, "alpha", Strong.easeOut, objHandle.alpha, 1, .5, true);
			} else {
				var globalPos:Point = new Point(dragCopy.x, dragCopy.y);
				var localPos:Point = dropTargetObject.globalToLocal(globalPos);
								
				if (dropTargetObject != null)
				{
					// get response function for the object were over				
					for (var i:int = 0; i < dropTargets.length; i++)
					{
						if (dropTargets[i].object == dropTargetObject)
						{
							dropTargets[i].responseFunction(objData, localPos);
							break;
						}
					}
				}
								
				finishDragDrop();
			}
		}
		
		public static function finishDragDrop(event:TweenEvent = null):void
		{			
			if (finishing == false || dragCopy.numChildren < 1)
				return;
			
			unHighlightDropTargets();
			
			finishing = false;
			
			if (returnTweenX != null)
				returnTweenX.stop();
				
			if (returnTweenY != null)
				returnTweenY.stop();
				
			if (returnTweenAlpha != null)
				returnTweenAlpha.stop();
				
			if (originalFadeOutTween != null)
				originalFadeOutTween.stop();
			
			if (originalFadeInTween != null)
				originalFadeInTween.stop();
				
			if (copyFadeInTween != null)
				copyFadeInTween.stop();
				
			if (originalFadeOutTween != null)
				originalFadeOutTween.stop();
				
			dragCopy.removeChildAt(0);
			objHandle.stage.removeChild(dragCopy);			
			objHandle = null;
			objDataType = null;
			objData = null;
			dropTargetObject = null;
		}
		
		public static function dragTimerHandler(event:TimerEvent):void
		{
			//dropTargetObject = findDropTarget(objHandle);
		}
		
		public static function highlightDropTargets():void
		{
			if (dropTargets == null)
				return;
			
			if (dropTargets.length == 0)
				return;
				
			dropMarkerArray = new Array();
									
			for (var i:int = 0; i < dropTargets.length; i++)
			{
				if (dropTargets[i].dataType == objDataType && dropTargets[i].object.parent != null)
				{
					/*
					var newPos:Point = dropTargets[i].object.parent.localToGlobal(new Point(dropTargets[i].object.x, dropTargets[i].object.y));
					dropMarkerArray.push(new DropMarker(new Rectangle(newPos.x, newPos.y, dropTargets[i].object.width, dropTargets[i].object.height), dropTargets[i].object));
					objHandle.stage.addChild(dropMarkerArray[(dropMarkerArray.length - 1)]);
					*/
					
					if (dropTargets[i].object["dragDropMarkerLayer_mc"] != null)
					{
						dropMarkerArray.push(new DropMarker(new Rectangle(0, 0, dropTargets[i].object.width, dropTargets[i].object.height), dropTargets[i].object));
						dropTargets[i].object["dragDropMarkerLayer_mc"].addChild(dropMarkerArray[(dropMarkerArray.length - 1)]);
					} else {
						dropMarkerArray.push(new DropMarker(new Rectangle(0, 0, dropTargets[i].object.width, dropTargets[i].object.height), dropTargets[i].object));
						dropTargets[i].object.addChild(dropMarkerArray[(dropMarkerArray.length - 1)]);
					}
				}
			}
		}
		
		public static function unHighlightDropTargets():void
		{					
			if (dropTargets == null)
				return;
				
			if (dropTargets.length == 0)
				return;
								
			for (var i:int = 0; i < dropMarkerArray.length; i++)
			{
				dropMarkerArray[i].destroy();
			}
		}
		
		/* JEFF New method based off nats, much faster but doesnt work for depths greater than 10 =(
		public static function findDropTarget(draggedObject:Object):Object
		{					
			if (dropTargets == null)
				return null;
			
			if (dropTargets.length == 0)
				return null;
				
			var returnObject:Object;
			var highestDepth:int = 0;

			for (var i:int = 0; i < dropTargets.length; i++)
			{
				if (dropTargets[i].dataType == objDataType && draggedObject != dropTargets[i].object)
				{
					var globalDropObjPos:Point = dropTargets[i].object.parent.localToGlobal(new Point(dropTargets[i].object.x, dropTargets[i].object.y));
					var dropObjRect:Rectangle = new Rectangle(globalDropObjPos.x, globalDropObjPos.y, dropTargets[i].object.width, dropTargets[i].object.height);
										
					if (dropTargets[i].object.stage.mouseX > dropObjRect.left && dropTargets[i].object.stage.mouseX < dropObjRect.right && dropTargets[i].object.stage.mouseY < dropObjRect.bottom && dropTargets[i].object.stage.mouseY > dropObjRect.top)
					{
						var tmpDepth:int = getObjectDepth(dropTargets[i].object);
						if (tmpDepth > highestDepth)
						{
							highestDepth = tmpDepth;
							returnObject = dropTargets[i].object;
						}
					}
				}
			}
			
			return returnObject;
		}
		
		private static function getObjectDepth(theObject:*):int
		{
			trace("Checking " + theObject);
			
			var returnDepth:int = 0;
			var foundDepth:int = 0;
			var levelMultiplier:int = 1000000000;
			var depthPath:Array = new Array();
			var checkObject:* = theObject;
			
			// build array 
			while (checkObject != null)
			{				
				depthPath.push(checkObject);				
				checkObject = checkObject.parent;
			}
			
			// find position for each level in the array
			depthPath.reverse();
			
			for each (var obj:* in depthPath)
			{
				foundDepth = 0;
				
				if (obj.parent != null)
				{
					for (var i:int = 0; i < obj.parent.numChildren; i++)
					{
						if (obj.parent.getChildAt(i) == obj)
						{
							foundDepth = (i + 1);
							trace(" Found " + obj + " with a depth of " + foundDepth + " adding " + (foundDepth * levelMultiplier));
							break;
						}
					}
				}
				
				returnDepth += (foundDepth * levelMultiplier);
				levelMultiplier *= 0.1;
			}
			trace("");
			trace("vreturn a depth of " + returnDepth);
			trace("");
			// return result;
			return returnDepth;
		}*/
		
		// Nats method
		public static function findDropTarget(draggedObject:Object):Object
		{					
			if (dropTargets == null)
				return null;
			
			if (dropTargets.length == 0)
				return null;

			var natsArray:Array = new Array();
			var returnObj:Object = null;						
			var dropTargetTrees:Array = new Array();			
			var maxDepth:int = 0;
			var currentDepth:int = 0;
			var currentParent:MovieClip;
			var depthParentArray:Array = new Array();
			var currentArray:Array;
			var depthDictionary:Dictionary = new Dictionary();
			var maxCurrentZ:int;
			
			for (var i:int = 0; i < dropTargets.length; i++)
			{
				if (dropTargets[i].dataType == objDataType && draggedObject != dropTargets[i].object)
				{
					var globalDropObjPos:Point = dropTargets[i].object.parent.localToGlobal(new Point(dropTargets[i].object.x, dropTargets[i].object.y));
					var dropObjRect:Rectangle = new Rectangle(globalDropObjPos.x, globalDropObjPos.y, dropTargets[i].object.width, dropTargets[i].object.height);
										
					if (dropTargets[i].object.stage.mouseX > dropObjRect.left && dropTargets[i].object.stage.mouseX < dropObjRect.right && dropTargets[i].object.stage.mouseY < dropObjRect.bottom && dropTargets[i].object.stage.mouseY > dropObjRect.top)
						natsArray.push(dropTargets[i]);
				}
			}
			
			// identify depth			
			for (i = 0; i < natsArray.length; i++)
			{
				currentParent = natsArray[i].object;
				currentDepth = 0;
				
				while (currentParent != null)
				{
					currentParent = currentParent.parent as MovieClip;
					if (currentParent as WTWindowContainer != null)					
						currentDepth ++;
				}
				
				if (currentDepth > maxDepth)
					maxDepth = currentDepth;									
			}
						
			// make chains			
			for (i = 0; i < natsArray.length; i++)
			{
				currentArray = new Array(maxDepth);
				
				currentParent = natsArray[i].object;
				currentDepth = 0;
				
				while (currentParent != null)
				{
					currentParent = currentParent.parent as MovieClip;				
					
					var currentParentParent:MovieClip = currentParent != null ? currentParent.parent as MovieClip : null;
					
					if (currentParentParent != null)
					{
						for (var parentDepth:int = 0; parentDepth < currentParentParent.numChildren; parentDepth ++)
						{
							if (currentParent == currentParentParent.getChildAt(parentDepth))								
							{
								currentArray[(maxDepth - 1) - currentDepth] = parentDepth;																			
								currentDepth ++;
							}
						}
					}
				}
				
				depthDictionary["target"] = natsArray[i].object;
				depthDictionary["array"] = currentArray;
				
				depthParentArray.push(depthDictionary);
			}

			// compare chains
			
			for(i = 0; i < maxDepth; i ++)
			{				
				maxCurrentZ = 0;
				
				if (depthParentArray.length == 1)
					continue;
					
				for (var i2:int = 0; i2 < depthParentArray.length; i2 ++)
				{
					if (depthParentArray[i2]["array"] != null && depthParentArray[i2]["array"][i] > maxCurrentZ)
						maxCurrentZ = depthParentArray[i2]["array"][i];									
				}
				
				for (i2 = 0; i2 < depthParentArray.length;)
				{					
					if (depthParentArray[i2]["array"][i] < maxCurrentZ || depthParentArray[i2]["array"][i] == undefined)					
					{
						depthParentArray.splice(i2, 1);					
					} else {
						i2 ++;
					}
				}
			}
			
			return depthParentArray.length > 0 ? depthParentArray[0]["target"] : null;
		}
		
		/* DEPRECIATED OVERLAP AMT METHOD.
		public static function findDropTarget(draggedObject:Object):Object
		{			
			if (dropTargets == null)
				return null;
			
			if (dropTargets.length == 0)
				return null;
				
			var dragObjRect:Rectangle = new Rectangle(dragCopy.x, dragCopy.y, dragCopy.width, dragCopy.height);
			var returnObj:Object = null;
			var overlappedsBy:Number = 0;
		
			for (var i:int = 0; i < dropTargets.length; i++)
			{
				if (dropTargets[i].dataType == objDataType && draggedObject != dropTargets[i].object)
				{
					var globalDropObjPos:Point = dropTargets[i].object.parent.localToGlobal(new Point(dropTargets[i].object.x, dropTargets[i].object.y));
					var dropObjRect:Rectangle = new Rectangle(globalDropObjPos.x, globalDropObjPos.y, dropTargets[i].object.width, dropTargets[i].object.height);
					var overlapAmt:Number = getRectOverlap(dragObjRect, dropObjRect);
					
					if (overlapAmt > 0 && overlapAmt > overlappedsBy)
					{
						trace(dropTargets[i].object + " " + overlapAmt);
						returnObj = dropTargets[i].object;
						overlappedsBy = overlapAmt;
					}
				}
			}
			
			return returnObj;
		}
		
		private static function getRectOverlap(A:Rectangle, B:Rectangle):Number
		{
			var xOverlap:Number = 0;
			var yOverlap:Number = 0;
			
			if (A.left > B.left)
			{
				xOverlap = (B.right - A.left);
			} else {
				xOverlap = (A.right - B.left);
			}
			
			if (A.top < B.top)
			{
				yOverlap = (A.bottom - B.top);
			} else {
				yOverlap = (B.bottom - A.top);
			}
						
			if (xOverlap < 0 || yOverlap < 0)
				return 0;
						
			return xOverlap + yOverlap;
		}
		*/
		
		/* DEPRECIATED hit test method.
		public static function findDropTarget(draggedObject:Object):Object
		{			
			if (dropTargets == null)
				return null;
			
			if (dropTargets.length == 0)
				return null;
		
			for (var i:int = 0; i < dropTargets.length; i++)
			{
				if (dropTargets[i].dataType == objDataType && dropTargets[i].object.hitTestObject(dragCopy) && draggedObject != dropTargets[i].object)
					return  dropTargets[i].object;
			}
			
			return null;
		}
		*/
	}
}